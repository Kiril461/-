import java.util.Scanner;

/**
 * Клас для обчислення кінетичної енергії та її відображення у вигляді текстової таблиці.
 */
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введіть масу тіла: ");
        double mass = scanner.nextDouble();
        System.out.print("Введіть швидкість тіла: ");
        double velocity = scanner.nextDouble();

        // Обчислення кінетичної енергії
        double kineticEnergy = calculateKineticEnergy(mass, velocity);

        // Знаходження цілої частини кінетичної енергії
        int integerPart = (int) kineticEnergy;

        // Перетворення цілої частини в двійкову систему числення
        String binaryRepresentation = Integer.toBinaryString(integerPart);

        // Виведення результатів
        System.out.println("Кінетична енергія тіла: " + kineticEnergy);
        System.out.println("Двійкове уявлення цілої частини кінетичної енергії: " + binaryRepresentation);

        // Створення фабрики калькуляторів
        KineticEnergyCalculatorFactory factory = new KineticEnergyCalculatorFactory();

        // Створення калькулятора для розрахунку кінетичної енергії
        KineticEnergyCalculator calculator = factory.createCalculator("simple");

        // Обчислення кінетичної енергії з використанням калькулятора
        double kineticEnergyWithCalculator = calculator.calculate(mass, velocity);

        // Виведення результату
        System.out.println("Кінетична енергія тіла (з використанням калькулятора): " + kineticEnergyWithCalculator);

        // Відображення результатів у вигляді текстової таблиці
        System.out.println("\nРезультати у вигляді текстової таблиці:");
        displayResultsInTable(kineticEnergy, binaryRepresentation, kineticEnergyWithCalculator);
    }

    /**
     * Метод для обчислення кінетичної енергії.
     * @param mass маса тіла
     * @param velocity швидкість тіла
     * @return значення кінетичної енергії
     */
    public static double calculateKineticEnergy(double mass, double velocity) {
        return 0.5 * mass * velocity * velocity;
    }

    /**
     * Метод для відображення результатів у вигляді текстової таблиці.
     * @param kineticEnergy кінетична енергія тіла
     * @param binaryRepresentation двійкове уявлення цілої частини кінетичної енергії
     * @param kineticEnergyWithCalculator кінетична енергія тіла з використанням калькулятора
     */
    public static void displayResultsInTable(double kineticEnergy, String binaryRepresentation, double kineticEnergyWithCalculator) {
        System.out.println("+------------------------------------+");
        System.out.println("|         Результати обчислень        |");
        System.out.println("+------------------------------------+");
        System.out.println("| Кінетична енергія тіла             | " + kineticEnergy);
        System.out.println("| Двійкове уявлення цілої частини   | " + binaryRepresentation);
        System.out.println("| кінетичної енергії                 |");
        System.out.println("| Кінетична енергія тіла             | " + kineticEnergyWithCalculator);
        System.out.println("| (з використанням калькулятора)     |");
        System.out.println("+------------------------------------+");
    }
}

/**
 * Інтерфейс для обчислення кінетичної енергії.
 */
interface KineticEnergyCalculator {
    double calculate(double mass, double velocity);
}

/**
 * Клас для обчислення кінетичної енергії за простою формулою.
 */
class SimpleKineticEnergyCalculator implements KineticEnergyCalculator {
    @Override
    public double calculate(double mass, double velocity) {
        return 0.5 * mass * velocity * velocity;
    }
}

/**
 * Фабрика для створення калькуляторів кінетичної енергії.
 */
class KineticEnergyCalculatorFactory {
    public KineticEnergyCalculator createCalculator(String type) {
        switch (type) {
            case "simple":
                return new SimpleKineticEnergyCalculator();
            default:
                throw new IllegalArgumentException("Невідомий тип калькулятора кінетичної енергії: " + type);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Клас для виконання завдання з обробки колекції об'єктів та їх відображення у графічному вигляді.
 */
public class CollectionProcessing {
    private List<Double> data;

    public CollectionProcessing() {
        this.data = new ArrayList<>();
    }

    /**
     * Метод для додавання значення до колекції.
     * @param value значення для додавання
     */
    public void addData(double value) {
        data.add(value);
    }

    /**
     * Метод для видалення значення з колекції за індексом.
     * @param index індекс значення для видалення
     */
    public void removeData(int index) {
        if (index >= 0 && index < data.size()) {
            data.remove(index);
        } else {
            System.out.println("Неправильний індекс для видалення");
        }
    }

    /**
     * Метод для відображення результатів обробки колекції у графічному вигляді.
     */
    public void displayGraphicalResults() {
        CollectionGraphicalDisplay display = new CollectionGraphicalDisplay(data);
        display.setVisible(true);
    }

    public static void main(String[] args) {
        CollectionProcessing processor = new CollectionProcessing();
        Scanner scanner = new Scanner(System.in);

        boolean isProcessing = true;
        while (isProcessing) {
            System.out.println("Меню:");
            System.out.println("1. Додати значення до колекції");
            System.out.println("2. Видалити значення з колекції");
            System.out.println("3. Відобразити результати у графічному вигляді");
            System.out.println("4. Вийти з програми");
            System.out.print("Виберіть опцію: ");
            int option = scanner.nextInt();

            switch (option) {
                case 1:
                    System.out.print("Введіть значення для додавання: ");
                    double valueToAdd = scanner.nextDouble();
                    processor.addData(valueToAdd);
                    break;
                case 2:
                    System.out.print("Введіть індекс значення для видалення: ");
                    int indexToRemove = scanner.nextInt();
                    processor.removeData(indexToRemove);
                    break;
                case 3:
                    processor.displayGraphicalResults();
                    break;
                case 4:
                    isProcessing = false;
                    break;
                default:
                    System.out.println("Неправильний вибір опції");
            }
        }

        scanner.close();
    }
}


